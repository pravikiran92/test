package test_app;


import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.management.ManagementFactory;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URL;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class Home extends javax.swing.JFrame {

    
    
    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        setIcon();
        setTitle("PCInfo");
        
     //---------------Get Public IP Address---------------------------------------------- 
        String systemipaddress = "";                                                 //--
        try                                                                          //--
        {                                                                            //--
            URL url_name = new URL("http://bot.whatismyipaddress.com");             //--
                                                                                    //--
            BufferedReader sc =                                                     //--
            new BufferedReader(new InputStreamReader(url_name.openStream()));       //--
                                                                                    //--
            // reads system IPAddress                                               //--
            systemipaddress = sc.readLine().trim();                                 //--
        }                                                                           //--
        catch (Exception e)                                                         //--
        {                                                                           //--
            systemipaddress = "Cannot Execute Properly";                            //--
        }                                                                           //--
        //System.out.println("Public IP Address: " + systemipaddress +"\n");          //--
        
                
                
                jLabel11.setText("Public IP Address: " + systemipaddress +"\n");
//--------------------------------------------------------------------------------------   
        
        
        
//           Connection conn = null;
//try
//       {
////Connection connection = DriverManager.getConnection("jdbc:mysql://192.168.1.252:3306/test?useSSL=false?user=root&password=usmsystems@1");
////        
//           String url = "jdbc:mysql://192.168.1.252:3306/test?useSSL=false";
//           Class.forName ("com.mysql.cj.jdbc.Driver");
//    conn = DriverManager.getConnection (url,"root","usmsystems@1");
//    jLabel10.setText("Database connection established");
//   //       JOptionPane.showMessageDialog(null,"Database connection established");
//       }
//       catch (Exception e)
//       {
//           e.printStackTrace();
//
//       }
//       finally
//       {
//    
//           if (conn != null)
//           {
//               try
//               {
//                   conn.close ();
//                   
//                //   jLabel10.setText("Database connection terminated");
//                  // JOptionPane.showMessageDialog(null,"Database connection terminated");
//               }
//               catch (Exception e) { /* ignore close errors */ }
//           }
//       }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        Btn_IP = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        btn_Add = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField10 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Btn_IP.setText("Get Details");
        Btn_IP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_IPActionPerformed(evt);
            }
        });

        jLabel1.setText("Operating system");

        jLabel2.setText("Host Name");

        jLabel3.setText("User Name");

        jLabel4.setText("IP Address");

        jLabel5.setText("RAM Size");

        jLabel6.setText("MAC Address");

        jLabel7.setText("HDD Size");

        jLabel8.setText("CUP");

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Model No");

        btn_Add.setText("ADD");
        btn_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddActionPerformed(evt);
            }
        });

        jButton2.setText("Screen Short");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        jLabel12.setText("Seriall No");

        jTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11ActionPerformed(evt);
            }
        });

        jLabel13.setText("CPU Cores");

        jLabel14.setText("CPU Processors");

        jTextField12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField12ActionPerformed(evt);
            }
        });

        jLabel11.setText(" ");

        jTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Btn_IP)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Add)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel6))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9)
                                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel14))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel12)
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel13))))))
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(45, 45, 45)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Btn_IP)
                    .addComponent(btn_Add))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static String format(double bytes, int digits) {
        String[] dictionary = {"bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"};
        int index = 0;
        for (index = 0; index < dictionary.length; index++) {
            if (bytes < 1024) {
                break;
            }
            bytes = bytes / 1024;
        }
        return String.format("%." + digits + "f", bytes) + " " + dictionary[index];
    }



    private void Btn_IPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_IPActionPerformed

        try {
            
            InetAddress inetAddress = InetAddress.getLocalHost();

            String ipAddress = inetAddress.getHostAddress();
            //System.out.println("IP address: " + ipAddress);
            jTextField4.setText(ipAddress);
            String hostName = inetAddress.getHostName();
            jTextField2.setText(hostName);
            String nameOS= System.getProperty("os.name");
            
            jTextField1.setText(nameOS);
            
           //System.out.println("Operating system Name="+ nameOS);

          //  System.out.println("Host Name: " + hostName);

            String userName = System.getProperty("user.name");
            jTextField3.setText(userName);
          //  System.out.println("User Name: " + userName);

            NetworkInterface networkInterface = NetworkInterface.getByInetAddress(inetAddress);
            
             byte[] macAddress = networkInterface.getHardwareAddress();
            StringBuilder stringBuilder = new StringBuilder();

            for (int i = 0; i < macAddress.length; i++) {

                stringBuilder.append(String.format("%02X%s", macAddress[i], (i < macAddress.length - 1) ? "-" : ""));
            }

           // System.out.println("MAC address : " + stringBuilder.toString());
            jTextField5.setText(stringBuilder.toString());

            long memorySize = ((com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean()).getTotalPhysicalMemorySize();
            // System.out.println("Size of C:="+diskSize+" Bytes");
             //System.out.println("RAM Size="+memorySize+" Bytes" + format(memorySize, 2));
           // System.out.println("RAM Size=" + format(memorySize, 0));
            
            jTextField6.setText(format(memorySize, 0));
           // JOptionPane.showMessageDialog(null,inetAddress.getHostAddress());
           // JOptionPane.showMessageDialog(null,inetAddress.getHostName());
            FileSystemView fsv = FileSystemView.getFileSystemView();

            File[] drives = File.listRoots();
            long diskSize = 0;
            if (drives != null && drives.length > 0) {
                for (File aDrive : drives) {
                    // System.out.println("Drive Letter: " + aDrive);
                    // System.out.println("\tType: " + fsv.getSystemTypeDescription(aDrive));
                    long totalSpace = aDrive.getTotalSpace() / 1024 / 1024 / 1024;
                    // System.out.println("\tTotal space: " + totalSpace);
                    // System.out.println("\tFree space: " + aDrive.getFreeSpace() / 1024 / 1024 / 1024);
                    diskSize += totalSpace;
                }
            }
            String size = "";
            // diskSize = 245;
            if (diskSize <= 250) {
                size = "250 GB";
            } else if (diskSize >= 251 && diskSize <= 320) {
                size = "320 GB";
            } else if (diskSize >= 321 && diskSize <= 500) {
                size = "500 GB";
            } else if (diskSize >= 501 && diskSize <= 1000) {
                size = "1 TB";
            } else if (diskSize >= 1001 && diskSize <= 1500) {
                size = "1.5 TB";
            } else {
                size = "2 TB";
            }
            jTextField7.setText(size);

            
   //----------------------------------Procer Name------------------------------------------------
            try {

                String[][] commands = new String[][]{
                {"CMD", "/C", "WMIC CPU GET Name"}}; // Computer Name

                for (int i = 0; i < commands.length; i++) {

                    String[] com = commands[i];

                    Process process = Runtime.getRuntime().exec(com);

                    process.getOutputStream().close(); // Closing output stream of the process

                    System.out.println();
                    String s = null;
                    String str = "";
                    // Reading sucessful output of the command
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
                        if (s.length()>0) {
                            str = s;
                        }
                    }
                    jTextField8.setText(str.trim());
                    // Reading error if any
//                    reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
//                    }

                }

            } catch (IOException e) {
                e.printStackTrace(); // TODO: necessary exception handling
            }
            
            
            //----------------------------------Procer Name------------------------------------------------
            try {

                String[][] commands = new String[][]{
                {"CMD", "/C", "wmic memorychip get banklable"}}; // Computer Name

                for (int i = 0; i < commands.length; i++) {

                    String[] com = commands[i];

                    Process process = Runtime.getRuntime().exec(com);

                    process.getOutputStream().close(); // Closing output stream of the process

                    System.out.println();
                    String s = null;
                    String str = "";
                    // Reading sucessful output of the command
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
                        if (s.length()>0) {
                            str = s;
                        }
                    }
                    jTextField13.setText(str.trim());
                    // Reading error if any
//                    reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
//                    }

                }

            } catch (IOException e) {
                e.printStackTrace(); // TODO: necessary exception handling
            }
           
  //----------------------------------------------------------------------------------------------------------          
     //WMIC BIOS GET SERIALNUMBER
  //----------------------------------Serial Number------------------------------------------------
            try {

                String[][] commands = new String[][]{
                {"CMD", "/C", "WMIC BIOS GET SERIALNUMBER"}}; // Computer Name

                for (int i = 0; i < commands.length; i++) {

                    String[] com = commands[i];

                    Process process = Runtime.getRuntime().exec(com);

                    process.getOutputStream().close(); // Closing output stream of the process

                    System.out.println();
                    String s = null;
                    String str = "";
                    // Reading sucessful output of the command
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
                        if (s.length()>0) {
                            str = s;
                        }
                    }
                    jTextField10.setText(str.trim());
                    // Reading error if any
//                    reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
//                    }

                }

            } catch (IOException e) {
                e.printStackTrace(); // TODO: necessary exception handling
            }
  
   //----------------------------------------------------------------------------------------------------------          
    
  //-----------------------for Product number --------------------------------------          
            
            
             try {

                String[][] commands = new String[][]{
                {"CMD", "/C", "WMIC baseboard get product"}}; // Computer Name

                for (int i = 0; i < commands.length; i++) {

                    String[] com = commands[i];

                    Process process = Runtime.getRuntime().exec(com);

                    process.getOutputStream().close(); // Closing output stream of the process

                    System.out.println();
                    String s = null;
                    String str = "";
                    // Reading sucessful output of the command
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
                        if (s.length()>0) {
                            str = s;
                        }
                    }
                    jTextField9.setText(str.trim());
                    // Reading error if any
//                    reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
//                    }

                }

            } catch (IOException e) {
                e.printStackTrace(); // TODO: necessary exception handling
            }
            
 //-----------------------------------CPU Cores---------------------------------------------------------------------------           
            
            
            
            
            try {

                String[][] commands = new String[][]{
                {"CMD", "/C", "wmic cpu get Numberofcores"}}; // Computer Name

                for (int i = 0; i < commands.length; i++) {

                    String[] com = commands[i];

                    Process process = Runtime.getRuntime().exec(com);

                    process.getOutputStream().close(); // Closing output stream of the process

                    System.out.println();
                    String s = null;
                    String str = "";
                    // Reading sucessful output of the command
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
                        if (s.length()>0) {
                            str = s;
                        }
                    }
                    jTextField11.setText(str.trim());
                    // Reading error if any
//                    reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
//                    }

                }

            } catch (IOException e) {
                e.printStackTrace(); // TODO: necessary exception handling
            }
            
//-----------------------------------CPU Processors---------------------------------------------------------------------------           
            
            
            
            
            try {

                String[][] commands = new String[][]{
                {"CMD", "/C", "wmic cpu get Numberoflogicalprocessors"}}; // Computer Name

                for (int i = 0; i < commands.length; i++) {

                    String[] com = commands[i];

                    Process process = Runtime.getRuntime().exec(com);

                    process.getOutputStream().close(); // Closing output stream of the process

                    System.out.println();
                    String s = null;
                    String str = "";
                    // Reading sucessful output of the command
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
                        if (s.length()>0) {
                            str = s;
                        }
                    }
                    jTextField12.setText(str.trim());
                    // Reading error if any
//                    reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
//                    while ((s = reader.readLine()) != null) {
//                        System.out.print(s);
//                    }

                }

            } catch (IOException e) {
                e.printStackTrace(); // TODO: necessary exception handling
            }            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            // TODO add your handling code here:
        } catch (UnknownHostException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SocketException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_Btn_IPActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new update_from().setVisible(true);
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btn_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddActionPerformed
       
        new reg_form().setVisible(true);
        this.setVisible(false);
        

// TODO add your handling code here:
    }//GEN-LAST:event_btn_AddActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        BufferedImage screenshotImage = new BufferedImage(
                this.getBounds().width, this.getBounds().height,
                BufferedImage.TYPE_INT_RGB);
        this.paint(screenshotImage.getGraphics());
        try {
            ImageIO.write(screenshotImage, "png", new File("screenShot.png" ));
            JOptionPane.showMessageDialog(null,"Check app drirectory");
       //   System.out.println("check app drirectory");  
        } catch (IOException ex) {
            System.err.println("ImageIsuues");
        }
        //screen short saving to jar file folder------
        
        
        
//        try {
//            Robot robot = new Robot();
//            String format = "jpg";
//            String fileName = "FullScreenshot." + format;
//             
//            Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
//            BufferedImage screenFullImage = robot.createScreenCapture(screenRect);
//            ImageIO.write(screenFullImage, format, new File(fileName));
//             
//            System.out.println("A full screenshot saved!");
//        } catch (AWTException | IOException ex) {
//            System.err.println(ex);
//        }
          // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField11ActionPerformed

    private void jTextField12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField12ActionPerformed

    private void jTextField13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_IP;
    private javax.swing.JButton btn_Add;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Icon.png")));
}
}